// Copyright 2022
// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLTCreateShaderFilterMessage ()
+ (FLTCreateShaderFilterMessage *)fromList:(NSArray *)list;
+ (nullable FLTCreateShaderFilterMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTCreateFilterMessage ()
+ (FLTCreateFilterMessage *)fromList:(NSArray *)list;
+ (nullable FLTCreateFilterMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTAppendFilterMessage ()
+ (FLTAppendFilterMessage *)fromList:(NSArray *)list;
+ (nullable FLTAppendFilterMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTAppendShaderFilterMessage ()
+ (FLTAppendShaderFilterMessage *)fromList:(NSArray *)list;
+ (nullable FLTAppendShaderFilterMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTRemoveFilterMessage ()
+ (FLTRemoveFilterMessage *)fromList:(NSArray *)list;
+ (nullable FLTRemoveFilterMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTReplaceFilterMessage ()
+ (FLTReplaceFilterMessage *)fromList:(NSArray *)list;
+ (nullable FLTReplaceFilterMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTInputSourceMessage ()
+ (FLTInputSourceMessage *)fromList:(NSArray *)list;
+ (nullable FLTInputSourceMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTInputDataMessage ()
+ (FLTInputDataMessage *)fromList:(NSArray *)list;
+ (nullable FLTInputDataMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTExportFileMessage ()
+ (FLTExportFileMessage *)fromList:(NSArray *)list;
+ (nullable FLTExportFileMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTExportDataMessage ()
+ (FLTExportDataMessage *)fromList:(NSArray *)list;
+ (nullable FLTExportDataMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTInputNumberValueMessage ()
+ (FLTInputNumberValueMessage *)fromList:(NSArray *)list;
+ (nullable FLTInputNumberValueMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTInputNumberListValueMessage ()
+ (FLTInputNumberListValueMessage *)fromList:(NSArray *)list;
+ (nullable FLTInputNumberListValueMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTInputDataValueMessage ()
+ (FLTInputDataValueMessage *)fromList:(NSArray *)list;
+ (nullable FLTInputDataValueMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTInputDataSourceValueMessage ()
+ (FLTInputDataSourceValueMessage *)fromList:(NSArray *)list;
+ (nullable FLTInputDataSourceValueMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTFilterMessage ()
+ (FLTFilterMessage *)fromList:(NSArray *)list;
+ (nullable FLTFilterMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTPreviewCreateMessage ()
+ (FLTPreviewCreateMessage *)fromList:(NSArray *)list;
+ (nullable FLTPreviewCreateMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTActivateFilterPreviewMessage ()
+ (FLTActivateFilterPreviewMessage *)fromList:(NSArray *)list;
+ (nullable FLTActivateFilterPreviewMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTPreviewSourceMessage ()
+ (FLTPreviewSourceMessage *)fromList:(NSArray *)list;
+ (nullable FLTPreviewSourceMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTPreviewPlayMessage ()
+ (FLTPreviewPlayMessage *)fromList:(NSArray *)list;
+ (nullable FLTPreviewPlayMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTPreviewPauseMessage ()
+ (FLTPreviewPauseMessage *)fromList:(NSArray *)list;
+ (nullable FLTPreviewPauseMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTPreviewDisposeMessage ()
+ (FLTPreviewDisposeMessage *)fromList:(NSArray *)list;
+ (nullable FLTPreviewDisposeMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLTCreateShaderFilterMessage
+ (instancetype)makeWithVertex:(nullable NSString *)vertex
    shader:(NSString *)shader
    twoInput:(NSNumber *)twoInput
    params:(NSDictionary<NSString *, NSDictionary<NSString *, id> *> *)params {
  FLTCreateShaderFilterMessage* pigeonResult = [[FLTCreateShaderFilterMessage alloc] init];
  pigeonResult.vertex = vertex;
  pigeonResult.shader = shader;
  pigeonResult.twoInput = twoInput;
  pigeonResult.params = params;
  return pigeonResult;
}
+ (FLTCreateShaderFilterMessage *)fromList:(NSArray *)list {
  FLTCreateShaderFilterMessage *pigeonResult = [[FLTCreateShaderFilterMessage alloc] init];
  pigeonResult.vertex = GetNullableObjectAtIndex(list, 0);
  pigeonResult.shader = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.shader != nil, @"");
  pigeonResult.twoInput = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.twoInput != nil, @"");
  pigeonResult.params = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.params != nil, @"");
  return pigeonResult;
}
+ (nullable FLTCreateShaderFilterMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTCreateShaderFilterMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.vertex ?: [NSNull null]),
    (self.shader ?: [NSNull null]),
    (self.twoInput ?: [NSNull null]),
    (self.params ?: [NSNull null]),
  ];
}
@end

@implementation FLTCreateFilterMessage
+ (instancetype)makeWithName:(NSString *)name {
  FLTCreateFilterMessage* pigeonResult = [[FLTCreateFilterMessage alloc] init];
  pigeonResult.name = name;
  return pigeonResult;
}
+ (FLTCreateFilterMessage *)fromList:(NSArray *)list {
  FLTCreateFilterMessage *pigeonResult = [[FLTCreateFilterMessage alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.name != nil, @"");
  return pigeonResult;
}
+ (nullable FLTCreateFilterMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTCreateFilterMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.name ?: [NSNull null]),
  ];
}
@end

@implementation FLTAppendFilterMessage
+ (instancetype)makeWithName:(NSString *)name
    filterId:(NSNumber *)filterId {
  FLTAppendFilterMessage* pigeonResult = [[FLTAppendFilterMessage alloc] init];
  pigeonResult.name = name;
  pigeonResult.filterId = filterId;
  return pigeonResult;
}
+ (FLTAppendFilterMessage *)fromList:(NSArray *)list {
  FLTAppendFilterMessage *pigeonResult = [[FLTAppendFilterMessage alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.name != nil, @"");
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.filterId != nil, @"");
  return pigeonResult;
}
+ (nullable FLTAppendFilterMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTAppendFilterMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.name ?: [NSNull null]),
    (self.filterId ?: [NSNull null]),
  ];
}
@end

@implementation FLTAppendShaderFilterMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    vertex:(nullable NSString *)vertex
    shader:(NSString *)shader
    params:(NSDictionary<NSString *, NSDictionary<NSString *, id> *> *)params {
  FLTAppendShaderFilterMessage* pigeonResult = [[FLTAppendShaderFilterMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.vertex = vertex;
  pigeonResult.shader = shader;
  pigeonResult.params = params;
  return pigeonResult;
}
+ (FLTAppendShaderFilterMessage *)fromList:(NSArray *)list {
  FLTAppendShaderFilterMessage *pigeonResult = [[FLTAppendShaderFilterMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.vertex = GetNullableObjectAtIndex(list, 1);
  pigeonResult.shader = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.shader != nil, @"");
  pigeonResult.params = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.params != nil, @"");
  return pigeonResult;
}
+ (nullable FLTAppendShaderFilterMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTAppendShaderFilterMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.vertex ?: [NSNull null]),
    (self.shader ?: [NSNull null]),
    (self.params ?: [NSNull null]),
  ];
}
@end

@implementation FLTRemoveFilterMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    filterIndex:(NSNumber *)filterIndex {
  FLTRemoveFilterMessage* pigeonResult = [[FLTRemoveFilterMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.filterIndex = filterIndex;
  return pigeonResult;
}
+ (FLTRemoveFilterMessage *)fromList:(NSArray *)list {
  FLTRemoveFilterMessage *pigeonResult = [[FLTRemoveFilterMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.filterIndex = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.filterIndex != nil, @"");
  return pigeonResult;
}
+ (nullable FLTRemoveFilterMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTRemoveFilterMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.filterIndex ?: [NSNull null]),
  ];
}
@end

@implementation FLTReplaceFilterMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    filterIndex:(NSNumber *)filterIndex
    name:(NSString *)name {
  FLTReplaceFilterMessage* pigeonResult = [[FLTReplaceFilterMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.filterIndex = filterIndex;
  pigeonResult.name = name;
  return pigeonResult;
}
+ (FLTReplaceFilterMessage *)fromList:(NSArray *)list {
  FLTReplaceFilterMessage *pigeonResult = [[FLTReplaceFilterMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.filterIndex = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.filterIndex != nil, @"");
  pigeonResult.name = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.name != nil, @"");
  return pigeonResult;
}
+ (nullable FLTReplaceFilterMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTReplaceFilterMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.filterIndex ?: [NSNull null]),
    (self.name ?: [NSNull null]),
  ];
}
@end

@implementation FLTInputSourceMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    path:(NSString *)path
    asset:(NSNumber *)asset
    video:(NSNumber *)video {
  FLTInputSourceMessage* pigeonResult = [[FLTInputSourceMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.path = path;
  pigeonResult.asset = asset;
  pigeonResult.video = video;
  return pigeonResult;
}
+ (FLTInputSourceMessage *)fromList:(NSArray *)list {
  FLTInputSourceMessage *pigeonResult = [[FLTInputSourceMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.path = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.path != nil, @"");
  pigeonResult.asset = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.asset != nil, @"");
  pigeonResult.video = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.video != nil, @"");
  return pigeonResult;
}
+ (nullable FLTInputSourceMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTInputSourceMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.path ?: [NSNull null]),
    (self.asset ?: [NSNull null]),
    (self.video ?: [NSNull null]),
  ];
}
@end

@implementation FLTInputDataMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    data:(FlutterStandardTypedData *)data {
  FLTInputDataMessage* pigeonResult = [[FLTInputDataMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (FLTInputDataMessage *)fromList:(NSArray *)list {
  FLTInputDataMessage *pigeonResult = [[FLTInputDataMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.data = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.data != nil, @"");
  return pigeonResult;
}
+ (nullable FLTInputDataMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTInputDataMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.data ?: [NSNull null]),
  ];
}
@end

@implementation FLTExportFileMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    path:(NSString *)path
    context:(NSString *)context
    presetName:(nullable NSString *)presetName
    period:(NSNumber *)period {
  FLTExportFileMessage* pigeonResult = [[FLTExportFileMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.path = path;
  pigeonResult.context = context;
  pigeonResult.presetName = presetName;
  pigeonResult.period = period;
  return pigeonResult;
}
+ (FLTExportFileMessage *)fromList:(NSArray *)list {
  FLTExportFileMessage *pigeonResult = [[FLTExportFileMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.path = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.path != nil, @"");
  pigeonResult.context = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.context != nil, @"");
  pigeonResult.presetName = GetNullableObjectAtIndex(list, 3);
  pigeonResult.period = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.period != nil, @"");
  return pigeonResult;
}
+ (nullable FLTExportFileMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTExportFileMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.path ?: [NSNull null]),
    (self.context ?: [NSNull null]),
    (self.presetName ?: [NSNull null]),
    (self.period ?: [NSNull null]),
  ];
}
@end

@implementation FLTExportDataMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    data:(nullable FlutterStandardTypedData *)data
    context:(NSString *)context {
  FLTExportDataMessage* pigeonResult = [[FLTExportDataMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.data = data;
  pigeonResult.context = context;
  return pigeonResult;
}
+ (FLTExportDataMessage *)fromList:(NSArray *)list {
  FLTExportDataMessage *pigeonResult = [[FLTExportDataMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.data = GetNullableObjectAtIndex(list, 1);
  pigeonResult.context = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.context != nil, @"");
  return pigeonResult;
}
+ (nullable FLTExportDataMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTExportDataMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.data ?: [NSNull null]),
    (self.context ?: [NSNull null]),
  ];
}
@end

@implementation FLTInputNumberValueMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    filterIndex:(NSNumber *)filterIndex
    key:(NSString *)key
    value:(NSNumber *)value {
  FLTInputNumberValueMessage* pigeonResult = [[FLTInputNumberValueMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.filterIndex = filterIndex;
  pigeonResult.key = key;
  pigeonResult.value = value;
  return pigeonResult;
}
+ (FLTInputNumberValueMessage *)fromList:(NSArray *)list {
  FLTInputNumberValueMessage *pigeonResult = [[FLTInputNumberValueMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.filterIndex = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.filterIndex != nil, @"");
  pigeonResult.key = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.key != nil, @"");
  pigeonResult.value = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.value != nil, @"");
  return pigeonResult;
}
+ (nullable FLTInputNumberValueMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTInputNumberValueMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.filterIndex ?: [NSNull null]),
    (self.key ?: [NSNull null]),
    (self.value ?: [NSNull null]),
  ];
}
@end

@implementation FLTInputNumberListValueMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    filterIndex:(NSNumber *)filterIndex
    key:(NSString *)key
    value:(NSArray<NSNumber *> *)value {
  FLTInputNumberListValueMessage* pigeonResult = [[FLTInputNumberListValueMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.filterIndex = filterIndex;
  pigeonResult.key = key;
  pigeonResult.value = value;
  return pigeonResult;
}
+ (FLTInputNumberListValueMessage *)fromList:(NSArray *)list {
  FLTInputNumberListValueMessage *pigeonResult = [[FLTInputNumberListValueMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.filterIndex = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.filterIndex != nil, @"");
  pigeonResult.key = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.key != nil, @"");
  pigeonResult.value = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.value != nil, @"");
  return pigeonResult;
}
+ (nullable FLTInputNumberListValueMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTInputNumberListValueMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.filterIndex ?: [NSNull null]),
    (self.key ?: [NSNull null]),
    (self.value ?: [NSNull null]),
  ];
}
@end

@implementation FLTInputDataValueMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    filterIndex:(NSNumber *)filterIndex
    key:(NSString *)key
    value:(FlutterStandardTypedData *)value
    lut8x64:(NSNumber *)lut8x64
    process:(NSNumber *)process {
  FLTInputDataValueMessage* pigeonResult = [[FLTInputDataValueMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.filterIndex = filterIndex;
  pigeonResult.key = key;
  pigeonResult.value = value;
  pigeonResult.lut8x64 = lut8x64;
  pigeonResult.process = process;
  return pigeonResult;
}
+ (FLTInputDataValueMessage *)fromList:(NSArray *)list {
  FLTInputDataValueMessage *pigeonResult = [[FLTInputDataValueMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.filterIndex = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.filterIndex != nil, @"");
  pigeonResult.key = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.key != nil, @"");
  pigeonResult.value = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.value != nil, @"");
  pigeonResult.lut8x64 = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.lut8x64 != nil, @"");
  pigeonResult.process = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.process != nil, @"");
  return pigeonResult;
}
+ (nullable FLTInputDataValueMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTInputDataValueMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.filterIndex ?: [NSNull null]),
    (self.key ?: [NSNull null]),
    (self.value ?: [NSNull null]),
    (self.lut8x64 ?: [NSNull null]),
    (self.process ?: [NSNull null]),
  ];
}
@end

@implementation FLTInputDataSourceValueMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId
    filterIndex:(NSNumber *)filterIndex
    key:(NSString *)key
    value:(NSString *)value
    lut8x64:(NSNumber *)lut8x64
    process:(NSNumber *)process {
  FLTInputDataSourceValueMessage* pigeonResult = [[FLTInputDataSourceValueMessage alloc] init];
  pigeonResult.filterId = filterId;
  pigeonResult.filterIndex = filterIndex;
  pigeonResult.key = key;
  pigeonResult.value = value;
  pigeonResult.lut8x64 = lut8x64;
  pigeonResult.process = process;
  return pigeonResult;
}
+ (FLTInputDataSourceValueMessage *)fromList:(NSArray *)list {
  FLTInputDataSourceValueMessage *pigeonResult = [[FLTInputDataSourceValueMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.filterIndex = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.filterIndex != nil, @"");
  pigeonResult.key = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.key != nil, @"");
  pigeonResult.value = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.value != nil, @"");
  pigeonResult.lut8x64 = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.lut8x64 != nil, @"");
  pigeonResult.process = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.process != nil, @"");
  return pigeonResult;
}
+ (nullable FLTInputDataSourceValueMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTInputDataSourceValueMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
    (self.filterIndex ?: [NSNull null]),
    (self.key ?: [NSNull null]),
    (self.value ?: [NSNull null]),
    (self.lut8x64 ?: [NSNull null]),
    (self.process ?: [NSNull null]),
  ];
}
@end

@implementation FLTFilterMessage
+ (instancetype)makeWithFilterId:(NSNumber *)filterId {
  FLTFilterMessage* pigeonResult = [[FLTFilterMessage alloc] init];
  pigeonResult.filterId = filterId;
  return pigeonResult;
}
+ (FLTFilterMessage *)fromList:(NSArray *)list {
  FLTFilterMessage *pigeonResult = [[FLTFilterMessage alloc] init];
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.filterId != nil, @"");
  return pigeonResult;
}
+ (nullable FLTFilterMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTFilterMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.filterId ?: [NSNull null]),
  ];
}
@end

@implementation FLTPreviewCreateMessage
+ (instancetype)makeWithTextureId:(NSNumber *)textureId {
  FLTPreviewCreateMessage* pigeonResult = [[FLTPreviewCreateMessage alloc] init];
  pigeonResult.textureId = textureId;
  return pigeonResult;
}
+ (FLTPreviewCreateMessage *)fromList:(NSArray *)list {
  FLTPreviewCreateMessage *pigeonResult = [[FLTPreviewCreateMessage alloc] init];
  pigeonResult.textureId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.textureId != nil, @"");
  return pigeonResult;
}
+ (nullable FLTPreviewCreateMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTPreviewCreateMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.textureId ?: [NSNull null]),
  ];
}
@end

@implementation FLTActivateFilterPreviewMessage
+ (instancetype)makeWithTextureId:(NSNumber *)textureId
    filterId:(NSNumber *)filterId
    context:(NSString *)context {
  FLTActivateFilterPreviewMessage* pigeonResult = [[FLTActivateFilterPreviewMessage alloc] init];
  pigeonResult.textureId = textureId;
  pigeonResult.filterId = filterId;
  pigeonResult.context = context;
  return pigeonResult;
}
+ (FLTActivateFilterPreviewMessage *)fromList:(NSArray *)list {
  FLTActivateFilterPreviewMessage *pigeonResult = [[FLTActivateFilterPreviewMessage alloc] init];
  pigeonResult.textureId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.textureId != nil, @"");
  pigeonResult.filterId = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.filterId != nil, @"");
  pigeonResult.context = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.context != nil, @"");
  return pigeonResult;
}
+ (nullable FLTActivateFilterPreviewMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTActivateFilterPreviewMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.textureId ?: [NSNull null]),
    (self.filterId ?: [NSNull null]),
    (self.context ?: [NSNull null]),
  ];
}
@end

@implementation FLTPreviewSourceMessage
+ (instancetype)makeWithTextureId:(NSNumber *)textureId
    path:(NSString *)path {
  FLTPreviewSourceMessage* pigeonResult = [[FLTPreviewSourceMessage alloc] init];
  pigeonResult.textureId = textureId;
  pigeonResult.path = path;
  return pigeonResult;
}
+ (FLTPreviewSourceMessage *)fromList:(NSArray *)list {
  FLTPreviewSourceMessage *pigeonResult = [[FLTPreviewSourceMessage alloc] init];
  pigeonResult.textureId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.textureId != nil, @"");
  pigeonResult.path = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.path != nil, @"");
  return pigeonResult;
}
+ (nullable FLTPreviewSourceMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTPreviewSourceMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.textureId ?: [NSNull null]),
    (self.path ?: [NSNull null]),
  ];
}
@end

@implementation FLTPreviewPlayMessage
+ (instancetype)makeWithTextureId:(NSNumber *)textureId {
  FLTPreviewPlayMessage* pigeonResult = [[FLTPreviewPlayMessage alloc] init];
  pigeonResult.textureId = textureId;
  return pigeonResult;
}
+ (FLTPreviewPlayMessage *)fromList:(NSArray *)list {
  FLTPreviewPlayMessage *pigeonResult = [[FLTPreviewPlayMessage alloc] init];
  pigeonResult.textureId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.textureId != nil, @"");
  return pigeonResult;
}
+ (nullable FLTPreviewPlayMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTPreviewPlayMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.textureId ?: [NSNull null]),
  ];
}
@end

@implementation FLTPreviewPauseMessage
+ (instancetype)makeWithTextureId:(NSNumber *)textureId {
  FLTPreviewPauseMessage* pigeonResult = [[FLTPreviewPauseMessage alloc] init];
  pigeonResult.textureId = textureId;
  return pigeonResult;
}
+ (FLTPreviewPauseMessage *)fromList:(NSArray *)list {
  FLTPreviewPauseMessage *pigeonResult = [[FLTPreviewPauseMessage alloc] init];
  pigeonResult.textureId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.textureId != nil, @"");
  return pigeonResult;
}
+ (nullable FLTPreviewPauseMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTPreviewPauseMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.textureId ?: [NSNull null]),
  ];
}
@end

@implementation FLTPreviewDisposeMessage
+ (instancetype)makeWithTextureId:(NSNumber *)textureId {
  FLTPreviewDisposeMessage* pigeonResult = [[FLTPreviewDisposeMessage alloc] init];
  pigeonResult.textureId = textureId;
  return pigeonResult;
}
+ (FLTPreviewDisposeMessage *)fromList:(NSArray *)list {
  FLTPreviewDisposeMessage *pigeonResult = [[FLTPreviewDisposeMessage alloc] init];
  pigeonResult.textureId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.textureId != nil, @"");
  return pigeonResult;
}
+ (nullable FLTPreviewDisposeMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTPreviewDisposeMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.textureId ?: [NSNull null]),
  ];
}
@end

@interface FLTImageVideoFilterFactoryApiCodecReader : FlutterStandardReader
@end
@implementation FLTImageVideoFilterFactoryApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTAppendFilterMessage fromList:[self readValue]];
    case 129: 
      return [FLTAppendShaderFilterMessage fromList:[self readValue]];
    case 130: 
      return [FLTCreateFilterMessage fromList:[self readValue]];
    case 131: 
      return [FLTCreateShaderFilterMessage fromList:[self readValue]];
    case 132: 
      return [FLTExportDataMessage fromList:[self readValue]];
    case 133: 
      return [FLTExportFileMessage fromList:[self readValue]];
    case 134: 
      return [FLTFilterMessage fromList:[self readValue]];
    case 135: 
      return [FLTInputDataMessage fromList:[self readValue]];
    case 136: 
      return [FLTInputDataSourceValueMessage fromList:[self readValue]];
    case 137: 
      return [FLTInputDataValueMessage fromList:[self readValue]];
    case 138: 
      return [FLTInputNumberListValueMessage fromList:[self readValue]];
    case 139: 
      return [FLTInputNumberValueMessage fromList:[self readValue]];
    case 140: 
      return [FLTInputSourceMessage fromList:[self readValue]];
    case 141: 
      return [FLTRemoveFilterMessage fromList:[self readValue]];
    case 142: 
      return [FLTReplaceFilterMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTImageVideoFilterFactoryApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTImageVideoFilterFactoryApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTAppendFilterMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTAppendShaderFilterMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTCreateFilterMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTCreateShaderFilterMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTExportDataMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTExportFileMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTFilterMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTInputDataMessage class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTInputDataSourceValueMessage class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTInputDataValueMessage class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTInputNumberListValueMessage class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTInputNumberValueMessage class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTInputSourceMessage class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTRemoveFilterMessage class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTReplaceFilterMessage class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTImageVideoFilterFactoryApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTImageVideoFilterFactoryApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTImageVideoFilterFactoryApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTImageVideoFilterFactoryApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTImageVideoFilterFactoryApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTImageVideoFilterFactoryApiCodecReaderWriter *readerWriter = [[FLTImageVideoFilterFactoryApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FLTImageVideoFilterFactoryApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTImageVideoFilterFactoryApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.createFilter"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createFilter:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(createFilter:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTCreateFilterMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FLTFilterMessage *output = [api createFilter:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.createShaderFilter"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createShaderFilter:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(createShaderFilter:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTCreateShaderFilterMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FLTFilterMessage *output = [api createShaderFilter:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.createFilterGroup"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createFilterGroup:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(createFilterGroup:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTFilterMessage *output = [api createFilterGroup:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.appendFilter"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appendFilter:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(appendFilter:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTAppendFilterMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api appendFilter:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.appendShaderFilter"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appendShaderFilter:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(appendShaderFilter:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTAppendShaderFilterMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api appendShaderFilter:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.removeFilter"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeFilter:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(removeFilter:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTRemoveFilterMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api removeFilter:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.replaceFilter"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(replaceFilter:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(replaceFilter:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTReplaceFilterMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api replaceFilter:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.setInputData"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setInputData:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(setInputData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTInputDataMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setInputData:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.setInputSource"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setInputSource:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(setInputSource:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTInputSourceMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setInputSource:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportData"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(exportData:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(exportData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTExportDataMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        FLTExportDataMessage *output = [api exportData:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportImageFile"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(exportImageFile:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(exportImageFile:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTExportFileMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api exportImageFile:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportVideoFile"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(exportVideoFile:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(exportVideoFile:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTExportFileMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api exportVideoFile:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.setNumberValue"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setNumberValue:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(setNumberValue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTInputNumberValueMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setNumberValue:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.setNumberListValue"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setNumberListValue:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(setNumberListValue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTInputNumberListValueMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setNumberListValue:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.setDataValue"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDataValue:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(setDataValue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTInputDataValueMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setDataValue:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.setDataSourceValue"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDataSourceValue:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(setDataSourceValue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTInputDataSourceValueMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setDataSourceValue:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.dispose"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposeFilter:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(disposeFilter:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTFilterMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api disposeFilter:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.videoFormatName"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(videoFormatName:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(videoFormatName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTInputSourceMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api videoFormatName:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ImageVideoFilterFactoryApi.videoAvailablePresets"
        binaryMessenger:binaryMessenger
        codec:FLTImageVideoFilterFactoryApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(videoAvailablePresets:error:)], @"FLTImageVideoFilterFactoryApi api (%@) doesn't respond to @selector(videoAvailablePresets:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTInputSourceMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<NSString *> *output = [api videoAvailablePresets:arg_msg error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTVideoPreviewApiCodecReader : FlutterStandardReader
@end
@implementation FLTVideoPreviewApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTActivateFilterPreviewMessage fromList:[self readValue]];
    case 129: 
      return [FLTPreviewCreateMessage fromList:[self readValue]];
    case 130: 
      return [FLTPreviewDisposeMessage fromList:[self readValue]];
    case 131: 
      return [FLTPreviewPauseMessage fromList:[self readValue]];
    case 132: 
      return [FLTPreviewPlayMessage fromList:[self readValue]];
    case 133: 
      return [FLTPreviewSourceMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTVideoPreviewApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTVideoPreviewApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTActivateFilterPreviewMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTPreviewCreateMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTPreviewDisposeMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTPreviewPauseMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTPreviewPlayMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTPreviewSourceMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTVideoPreviewApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTVideoPreviewApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTVideoPreviewApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTVideoPreviewApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTVideoPreviewApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTVideoPreviewApiCodecReaderWriter *readerWriter = [[FLTVideoPreviewApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FLTVideoPreviewApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTVideoPreviewApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPreviewApi.create"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(create:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(create:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FLTPreviewCreateMessage *output = [api create:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPreviewApi.setFilter"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFilter:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(setFilter:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTActivateFilterPreviewMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setFilter:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPreviewApi.setSource"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSource:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(setSource:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTPreviewSourceMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setSource:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPreviewApi.play"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(play:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(play:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTPreviewPlayMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api play:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPreviewApi.pause"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pause:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(pause:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTPreviewPauseMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pause:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.VideoPreviewApi.dispose"
        binaryMessenger:binaryMessenger
        codec:FLTVideoPreviewApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(dispose:error:)], @"FLTVideoPreviewApi api (%@) doesn't respond to @selector(dispose:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTPreviewDisposeMessage *arg_msg = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api dispose:arg_msg error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
