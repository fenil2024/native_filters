// Copyright 2022
// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package nd.flutter.plugins.ivfilters;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CreateShaderFilterMessage {
    private @Nullable String vertex;

    public @Nullable String getVertex() {
      return vertex;
    }

    public void setVertex(@Nullable String setterArg) {
      this.vertex = setterArg;
    }

    private @NonNull String shader;

    public @NonNull String getShader() {
      return shader;
    }

    public void setShader(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"shader\" is null.");
      }
      this.shader = setterArg;
    }

    private @NonNull Boolean twoInput;

    public @NonNull Boolean getTwoInput() {
      return twoInput;
    }

    public void setTwoInput(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"twoInput\" is null.");
      }
      this.twoInput = setterArg;
    }

    private @NonNull Map<String, Map<String, Object>> params;

    public @NonNull Map<String, Map<String, Object>> getParams() {
      return params;
    }

    public void setParams(@NonNull Map<String, Map<String, Object>> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"params\" is null.");
      }
      this.params = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private CreateShaderFilterMessage() {}

    public static final class Builder {

      private @Nullable String vertex;

      public @NonNull Builder setVertex(@Nullable String setterArg) {
        this.vertex = setterArg;
        return this;
      }

      private @Nullable String shader;

      public @NonNull Builder setShader(@NonNull String setterArg) {
        this.shader = setterArg;
        return this;
      }

      private @Nullable Boolean twoInput;

      public @NonNull Builder setTwoInput(@NonNull Boolean setterArg) {
        this.twoInput = setterArg;
        return this;
      }

      private @Nullable Map<String, Map<String, Object>> params;

      public @NonNull Builder setParams(@NonNull Map<String, Map<String, Object>> setterArg) {
        this.params = setterArg;
        return this;
      }

      public @NonNull CreateShaderFilterMessage build() {
        CreateShaderFilterMessage pigeonReturn = new CreateShaderFilterMessage();
        pigeonReturn.setVertex(vertex);
        pigeonReturn.setShader(shader);
        pigeonReturn.setTwoInput(twoInput);
        pigeonReturn.setParams(params);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(vertex);
      toListResult.add(shader);
      toListResult.add(twoInput);
      toListResult.add(params);
      return toListResult;
    }

    static @NonNull CreateShaderFilterMessage fromList(@NonNull ArrayList<Object> list) {
      CreateShaderFilterMessage pigeonResult = new CreateShaderFilterMessage();
      Object vertex = list.get(0);
      pigeonResult.setVertex((String) vertex);
      Object shader = list.get(1);
      pigeonResult.setShader((String) shader);
      Object twoInput = list.get(2);
      pigeonResult.setTwoInput((Boolean) twoInput);
      Object params = list.get(3);
      pigeonResult.setParams((Map<String, Map<String, Object>>) params);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CreateFilterMessage {
    private @NonNull String name;

    public @NonNull String getName() {
      return name;
    }

    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private CreateFilterMessage() {}

    public static final class Builder {

      private @Nullable String name;

      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }

      public @NonNull CreateFilterMessage build() {
        CreateFilterMessage pigeonReturn = new CreateFilterMessage();
        pigeonReturn.setName(name);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(name);
      return toListResult;
    }

    static @NonNull CreateFilterMessage fromList(@NonNull ArrayList<Object> list) {
      CreateFilterMessage pigeonResult = new CreateFilterMessage();
      Object name = list.get(0);
      pigeonResult.setName((String) name);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AppendFilterMessage {
    private @NonNull String name;

    public @NonNull String getName() {
      return name;
    }

    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AppendFilterMessage() {}

    public static final class Builder {

      private @Nullable String name;

      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      public @NonNull AppendFilterMessage build() {
        AppendFilterMessage pigeonReturn = new AppendFilterMessage();
        pigeonReturn.setName(name);
        pigeonReturn.setFilterId(filterId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(name);
      toListResult.add(filterId);
      return toListResult;
    }

    static @NonNull AppendFilterMessage fromList(@NonNull ArrayList<Object> list) {
      AppendFilterMessage pigeonResult = new AppendFilterMessage();
      Object name = list.get(0);
      pigeonResult.setName((String) name);
      Object filterId = list.get(1);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AppendShaderFilterMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @Nullable String vertex;

    public @Nullable String getVertex() {
      return vertex;
    }

    public void setVertex(@Nullable String setterArg) {
      this.vertex = setterArg;
    }

    private @NonNull String shader;

    public @NonNull String getShader() {
      return shader;
    }

    public void setShader(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"shader\" is null.");
      }
      this.shader = setterArg;
    }

    private @NonNull Map<String, Map<String, Object>> params;

    public @NonNull Map<String, Map<String, Object>> getParams() {
      return params;
    }

    public void setParams(@NonNull Map<String, Map<String, Object>> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"params\" is null.");
      }
      this.params = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AppendShaderFilterMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable String vertex;

      public @NonNull Builder setVertex(@Nullable String setterArg) {
        this.vertex = setterArg;
        return this;
      }

      private @Nullable String shader;

      public @NonNull Builder setShader(@NonNull String setterArg) {
        this.shader = setterArg;
        return this;
      }

      private @Nullable Map<String, Map<String, Object>> params;

      public @NonNull Builder setParams(@NonNull Map<String, Map<String, Object>> setterArg) {
        this.params = setterArg;
        return this;
      }

      public @NonNull AppendShaderFilterMessage build() {
        AppendShaderFilterMessage pigeonReturn = new AppendShaderFilterMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setVertex(vertex);
        pigeonReturn.setShader(shader);
        pigeonReturn.setParams(params);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(filterId);
      toListResult.add(vertex);
      toListResult.add(shader);
      toListResult.add(params);
      return toListResult;
    }

    static @NonNull AppendShaderFilterMessage fromList(@NonNull ArrayList<Object> list) {
      AppendShaderFilterMessage pigeonResult = new AppendShaderFilterMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object vertex = list.get(1);
      pigeonResult.setVertex((String) vertex);
      Object shader = list.get(2);
      pigeonResult.setShader((String) shader);
      Object params = list.get(3);
      pigeonResult.setParams((Map<String, Map<String, Object>>) params);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RemoveFilterMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull Long filterIndex;

    public @NonNull Long getFilterIndex() {
      return filterIndex;
    }

    public void setFilterIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterIndex\" is null.");
      }
      this.filterIndex = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private RemoveFilterMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable Long filterIndex;

      public @NonNull Builder setFilterIndex(@NonNull Long setterArg) {
        this.filterIndex = setterArg;
        return this;
      }

      public @NonNull RemoveFilterMessage build() {
        RemoveFilterMessage pigeonReturn = new RemoveFilterMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setFilterIndex(filterIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(filterId);
      toListResult.add(filterIndex);
      return toListResult;
    }

    static @NonNull RemoveFilterMessage fromList(@NonNull ArrayList<Object> list) {
      RemoveFilterMessage pigeonResult = new RemoveFilterMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object filterIndex = list.get(1);
      pigeonResult.setFilterIndex((filterIndex == null) ? null : ((filterIndex instanceof Integer) ? (Integer) filterIndex : (Long) filterIndex));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReplaceFilterMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull Long filterIndex;

    public @NonNull Long getFilterIndex() {
      return filterIndex;
    }

    public void setFilterIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterIndex\" is null.");
      }
      this.filterIndex = setterArg;
    }

    private @NonNull String name;

    public @NonNull String getName() {
      return name;
    }

    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ReplaceFilterMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable Long filterIndex;

      public @NonNull Builder setFilterIndex(@NonNull Long setterArg) {
        this.filterIndex = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }

      public @NonNull ReplaceFilterMessage build() {
        ReplaceFilterMessage pigeonReturn = new ReplaceFilterMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setFilterIndex(filterIndex);
        pigeonReturn.setName(name);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(filterId);
      toListResult.add(filterIndex);
      toListResult.add(name);
      return toListResult;
    }

    static @NonNull ReplaceFilterMessage fromList(@NonNull ArrayList<Object> list) {
      ReplaceFilterMessage pigeonResult = new ReplaceFilterMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object filterIndex = list.get(1);
      pigeonResult.setFilterIndex((filterIndex == null) ? null : ((filterIndex instanceof Integer) ? (Integer) filterIndex : (Long) filterIndex));
      Object name = list.get(2);
      pigeonResult.setName((String) name);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InputSourceMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull String path;

    public @NonNull String getPath() {
      return path;
    }

    public void setPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"path\" is null.");
      }
      this.path = setterArg;
    }

    private @NonNull Boolean asset;

    public @NonNull Boolean getAsset() {
      return asset;
    }

    public void setAsset(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"asset\" is null.");
      }
      this.asset = setterArg;
    }

    private @NonNull Boolean video;

    public @NonNull Boolean getVideo() {
      return video;
    }

    public void setVideo(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"video\" is null.");
      }
      this.video = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private InputSourceMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable String path;

      public @NonNull Builder setPath(@NonNull String setterArg) {
        this.path = setterArg;
        return this;
      }

      private @Nullable Boolean asset;

      public @NonNull Builder setAsset(@NonNull Boolean setterArg) {
        this.asset = setterArg;
        return this;
      }

      private @Nullable Boolean video;

      public @NonNull Builder setVideo(@NonNull Boolean setterArg) {
        this.video = setterArg;
        return this;
      }

      public @NonNull InputSourceMessage build() {
        InputSourceMessage pigeonReturn = new InputSourceMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setPath(path);
        pigeonReturn.setAsset(asset);
        pigeonReturn.setVideo(video);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(filterId);
      toListResult.add(path);
      toListResult.add(asset);
      toListResult.add(video);
      return toListResult;
    }

    static @NonNull InputSourceMessage fromList(@NonNull ArrayList<Object> list) {
      InputSourceMessage pigeonResult = new InputSourceMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object path = list.get(1);
      pigeonResult.setPath((String) path);
      Object asset = list.get(2);
      pigeonResult.setAsset((Boolean) asset);
      Object video = list.get(3);
      pigeonResult.setVideo((Boolean) video);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InputDataMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull byte[] data;

    public @NonNull byte[] getData() {
      return data;
    }

    public void setData(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private InputDataMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable byte[] data;

      public @NonNull Builder setData(@NonNull byte[] setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull InputDataMessage build() {
        InputDataMessage pigeonReturn = new InputDataMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(filterId);
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull InputDataMessage fromList(@NonNull ArrayList<Object> list) {
      InputDataMessage pigeonResult = new InputDataMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object data = list.get(1);
      pigeonResult.setData((byte[]) data);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ExportFileMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull String path;

    public @NonNull String getPath() {
      return path;
    }

    public void setPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"path\" is null.");
      }
      this.path = setterArg;
    }

    private @NonNull String context;

    public @NonNull String getContext() {
      return context;
    }

    public void setContext(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"context\" is null.");
      }
      this.context = setterArg;
    }

    private @Nullable String presetName;

    public @Nullable String getPresetName() {
      return presetName;
    }

    public void setPresetName(@Nullable String setterArg) {
      this.presetName = setterArg;
    }

    private @NonNull Long period;

    public @NonNull Long getPeriod() {
      return period;
    }

    public void setPeriod(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"period\" is null.");
      }
      this.period = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ExportFileMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable String path;

      public @NonNull Builder setPath(@NonNull String setterArg) {
        this.path = setterArg;
        return this;
      }

      private @Nullable String context;

      public @NonNull Builder setContext(@NonNull String setterArg) {
        this.context = setterArg;
        return this;
      }

      private @Nullable String presetName;

      public @NonNull Builder setPresetName(@Nullable String setterArg) {
        this.presetName = setterArg;
        return this;
      }

      private @Nullable Long period;

      public @NonNull Builder setPeriod(@NonNull Long setterArg) {
        this.period = setterArg;
        return this;
      }

      public @NonNull ExportFileMessage build() {
        ExportFileMessage pigeonReturn = new ExportFileMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setPath(path);
        pigeonReturn.setContext(context);
        pigeonReturn.setPresetName(presetName);
        pigeonReturn.setPeriod(period);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(filterId);
      toListResult.add(path);
      toListResult.add(context);
      toListResult.add(presetName);
      toListResult.add(period);
      return toListResult;
    }

    static @NonNull ExportFileMessage fromList(@NonNull ArrayList<Object> list) {
      ExportFileMessage pigeonResult = new ExportFileMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object path = list.get(1);
      pigeonResult.setPath((String) path);
      Object context = list.get(2);
      pigeonResult.setContext((String) context);
      Object presetName = list.get(3);
      pigeonResult.setPresetName((String) presetName);
      Object period = list.get(4);
      pigeonResult.setPeriod((period == null) ? null : ((period instanceof Integer) ? (Integer) period : (Long) period));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ExportDataMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @Nullable byte[] data;

    public @Nullable byte[] getData() {
      return data;
    }

    public void setData(@Nullable byte[] setterArg) {
      this.data = setterArg;
    }

    private @NonNull String context;

    public @NonNull String getContext() {
      return context;
    }

    public void setContext(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"context\" is null.");
      }
      this.context = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ExportDataMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable byte[] data;

      public @NonNull Builder setData(@Nullable byte[] setterArg) {
        this.data = setterArg;
        return this;
      }

      private @Nullable String context;

      public @NonNull Builder setContext(@NonNull String setterArg) {
        this.context = setterArg;
        return this;
      }

      public @NonNull ExportDataMessage build() {
        ExportDataMessage pigeonReturn = new ExportDataMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setData(data);
        pigeonReturn.setContext(context);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(filterId);
      toListResult.add(data);
      toListResult.add(context);
      return toListResult;
    }

    static @NonNull ExportDataMessage fromList(@NonNull ArrayList<Object> list) {
      ExportDataMessage pigeonResult = new ExportDataMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object data = list.get(1);
      pigeonResult.setData((byte[]) data);
      Object context = list.get(2);
      pigeonResult.setContext((String) context);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InputNumberValueMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull Long filterIndex;

    public @NonNull Long getFilterIndex() {
      return filterIndex;
    }

    public void setFilterIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterIndex\" is null.");
      }
      this.filterIndex = setterArg;
    }

    private @NonNull String key;

    public @NonNull String getKey() {
      return key;
    }

    public void setKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"key\" is null.");
      }
      this.key = setterArg;
    }

    private @NonNull Double value;

    public @NonNull Double getValue() {
      return value;
    }

    public void setValue(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private InputNumberValueMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable Long filterIndex;

      public @NonNull Builder setFilterIndex(@NonNull Long setterArg) {
        this.filterIndex = setterArg;
        return this;
      }

      private @Nullable String key;

      public @NonNull Builder setKey(@NonNull String setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable Double value;

      public @NonNull Builder setValue(@NonNull Double setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull InputNumberValueMessage build() {
        InputNumberValueMessage pigeonReturn = new InputNumberValueMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setFilterIndex(filterIndex);
        pigeonReturn.setKey(key);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(filterId);
      toListResult.add(filterIndex);
      toListResult.add(key);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull InputNumberValueMessage fromList(@NonNull ArrayList<Object> list) {
      InputNumberValueMessage pigeonResult = new InputNumberValueMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object filterIndex = list.get(1);
      pigeonResult.setFilterIndex((filterIndex == null) ? null : ((filterIndex instanceof Integer) ? (Integer) filterIndex : (Long) filterIndex));
      Object key = list.get(2);
      pigeonResult.setKey((String) key);
      Object value = list.get(3);
      pigeonResult.setValue((Double) value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InputNumberListValueMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull Long filterIndex;

    public @NonNull Long getFilterIndex() {
      return filterIndex;
    }

    public void setFilterIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterIndex\" is null.");
      }
      this.filterIndex = setterArg;
    }

    private @NonNull String key;

    public @NonNull String getKey() {
      return key;
    }

    public void setKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"key\" is null.");
      }
      this.key = setterArg;
    }

    private @NonNull List<Double> value;

    public @NonNull List<Double> getValue() {
      return value;
    }

    public void setValue(@NonNull List<Double> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private InputNumberListValueMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable Long filterIndex;

      public @NonNull Builder setFilterIndex(@NonNull Long setterArg) {
        this.filterIndex = setterArg;
        return this;
      }

      private @Nullable String key;

      public @NonNull Builder setKey(@NonNull String setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable List<Double> value;

      public @NonNull Builder setValue(@NonNull List<Double> setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull InputNumberListValueMessage build() {
        InputNumberListValueMessage pigeonReturn = new InputNumberListValueMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setFilterIndex(filterIndex);
        pigeonReturn.setKey(key);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(filterId);
      toListResult.add(filterIndex);
      toListResult.add(key);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull InputNumberListValueMessage fromList(@NonNull ArrayList<Object> list) {
      InputNumberListValueMessage pigeonResult = new InputNumberListValueMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object filterIndex = list.get(1);
      pigeonResult.setFilterIndex((filterIndex == null) ? null : ((filterIndex instanceof Integer) ? (Integer) filterIndex : (Long) filterIndex));
      Object key = list.get(2);
      pigeonResult.setKey((String) key);
      Object value = list.get(3);
      pigeonResult.setValue((List<Double>) value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InputDataValueMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull Long filterIndex;

    public @NonNull Long getFilterIndex() {
      return filterIndex;
    }

    public void setFilterIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterIndex\" is null.");
      }
      this.filterIndex = setterArg;
    }

    private @NonNull String key;

    public @NonNull String getKey() {
      return key;
    }

    public void setKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"key\" is null.");
      }
      this.key = setterArg;
    }

    private @NonNull byte[] value;

    public @NonNull byte[] getValue() {
      return value;
    }

    public void setValue(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    private @NonNull Boolean lut8x64;

    public @NonNull Boolean getLut8x64() {
      return lut8x64;
    }

    public void setLut8x64(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"lut8x64\" is null.");
      }
      this.lut8x64 = setterArg;
    }

    private @NonNull Boolean process;

    public @NonNull Boolean getProcess() {
      return process;
    }

    public void setProcess(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"process\" is null.");
      }
      this.process = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private InputDataValueMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable Long filterIndex;

      public @NonNull Builder setFilterIndex(@NonNull Long setterArg) {
        this.filterIndex = setterArg;
        return this;
      }

      private @Nullable String key;

      public @NonNull Builder setKey(@NonNull String setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable byte[] value;

      public @NonNull Builder setValue(@NonNull byte[] setterArg) {
        this.value = setterArg;
        return this;
      }

      private @Nullable Boolean lut8x64;

      public @NonNull Builder setLut8x64(@NonNull Boolean setterArg) {
        this.lut8x64 = setterArg;
        return this;
      }

      private @Nullable Boolean process;

      public @NonNull Builder setProcess(@NonNull Boolean setterArg) {
        this.process = setterArg;
        return this;
      }

      public @NonNull InputDataValueMessage build() {
        InputDataValueMessage pigeonReturn = new InputDataValueMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setFilterIndex(filterIndex);
        pigeonReturn.setKey(key);
        pigeonReturn.setValue(value);
        pigeonReturn.setLut8x64(lut8x64);
        pigeonReturn.setProcess(process);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(filterId);
      toListResult.add(filterIndex);
      toListResult.add(key);
      toListResult.add(value);
      toListResult.add(lut8x64);
      toListResult.add(process);
      return toListResult;
    }

    static @NonNull InputDataValueMessage fromList(@NonNull ArrayList<Object> list) {
      InputDataValueMessage pigeonResult = new InputDataValueMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object filterIndex = list.get(1);
      pigeonResult.setFilterIndex((filterIndex == null) ? null : ((filterIndex instanceof Integer) ? (Integer) filterIndex : (Long) filterIndex));
      Object key = list.get(2);
      pigeonResult.setKey((String) key);
      Object value = list.get(3);
      pigeonResult.setValue((byte[]) value);
      Object lut8x64 = list.get(4);
      pigeonResult.setLut8x64((Boolean) lut8x64);
      Object process = list.get(5);
      pigeonResult.setProcess((Boolean) process);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InputDataSourceValueMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull Long filterIndex;

    public @NonNull Long getFilterIndex() {
      return filterIndex;
    }

    public void setFilterIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterIndex\" is null.");
      }
      this.filterIndex = setterArg;
    }

    private @NonNull String key;

    public @NonNull String getKey() {
      return key;
    }

    public void setKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"key\" is null.");
      }
      this.key = setterArg;
    }

    private @NonNull String value;

    public @NonNull String getValue() {
      return value;
    }

    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    private @NonNull Boolean lut8x64;

    public @NonNull Boolean getLut8x64() {
      return lut8x64;
    }

    public void setLut8x64(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"lut8x64\" is null.");
      }
      this.lut8x64 = setterArg;
    }

    private @NonNull Boolean process;

    public @NonNull Boolean getProcess() {
      return process;
    }

    public void setProcess(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"process\" is null.");
      }
      this.process = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private InputDataSourceValueMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable Long filterIndex;

      public @NonNull Builder setFilterIndex(@NonNull Long setterArg) {
        this.filterIndex = setterArg;
        return this;
      }

      private @Nullable String key;

      public @NonNull Builder setKey(@NonNull String setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable String value;

      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }

      private @Nullable Boolean lut8x64;

      public @NonNull Builder setLut8x64(@NonNull Boolean setterArg) {
        this.lut8x64 = setterArg;
        return this;
      }

      private @Nullable Boolean process;

      public @NonNull Builder setProcess(@NonNull Boolean setterArg) {
        this.process = setterArg;
        return this;
      }

      public @NonNull InputDataSourceValueMessage build() {
        InputDataSourceValueMessage pigeonReturn = new InputDataSourceValueMessage();
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setFilterIndex(filterIndex);
        pigeonReturn.setKey(key);
        pigeonReturn.setValue(value);
        pigeonReturn.setLut8x64(lut8x64);
        pigeonReturn.setProcess(process);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(filterId);
      toListResult.add(filterIndex);
      toListResult.add(key);
      toListResult.add(value);
      toListResult.add(lut8x64);
      toListResult.add(process);
      return toListResult;
    }

    static @NonNull InputDataSourceValueMessage fromList(@NonNull ArrayList<Object> list) {
      InputDataSourceValueMessage pigeonResult = new InputDataSourceValueMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object filterIndex = list.get(1);
      pigeonResult.setFilterIndex((filterIndex == null) ? null : ((filterIndex instanceof Integer) ? (Integer) filterIndex : (Long) filterIndex));
      Object key = list.get(2);
      pigeonResult.setKey((String) key);
      Object value = list.get(3);
      pigeonResult.setValue((String) value);
      Object lut8x64 = list.get(4);
      pigeonResult.setLut8x64((Boolean) lut8x64);
      Object process = list.get(5);
      pigeonResult.setProcess((Boolean) process);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FilterMessage {
    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private FilterMessage() {}

    public static final class Builder {

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      public @NonNull FilterMessage build() {
        FilterMessage pigeonReturn = new FilterMessage();
        pigeonReturn.setFilterId(filterId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(filterId);
      return toListResult;
    }

    static @NonNull FilterMessage fromList(@NonNull ArrayList<Object> list) {
      FilterMessage pigeonResult = new FilterMessage();
      Object filterId = list.get(0);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PreviewCreateMessage {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PreviewCreateMessage() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      public @NonNull PreviewCreateMessage build() {
        PreviewCreateMessage pigeonReturn = new PreviewCreateMessage();
        pigeonReturn.setTextureId(textureId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(textureId);
      return toListResult;
    }

    static @NonNull PreviewCreateMessage fromList(@NonNull ArrayList<Object> list) {
      PreviewCreateMessage pigeonResult = new PreviewCreateMessage();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ActivateFilterPreviewMessage {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    private @NonNull Long filterId;

    public @NonNull Long getFilterId() {
      return filterId;
    }

    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    private @NonNull String context;

    public @NonNull String getContext() {
      return context;
    }

    public void setContext(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"context\" is null.");
      }
      this.context = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ActivateFilterPreviewMessage() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      private @Nullable Long filterId;

      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }

      private @Nullable String context;

      public @NonNull Builder setContext(@NonNull String setterArg) {
        this.context = setterArg;
        return this;
      }

      public @NonNull ActivateFilterPreviewMessage build() {
        ActivateFilterPreviewMessage pigeonReturn = new ActivateFilterPreviewMessage();
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setFilterId(filterId);
        pigeonReturn.setContext(context);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(textureId);
      toListResult.add(filterId);
      toListResult.add(context);
      return toListResult;
    }

    static @NonNull ActivateFilterPreviewMessage fromList(@NonNull ArrayList<Object> list) {
      ActivateFilterPreviewMessage pigeonResult = new ActivateFilterPreviewMessage();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      Object filterId = list.get(1);
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer) filterId : (Long) filterId));
      Object context = list.get(2);
      pigeonResult.setContext((String) context);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PreviewSourceMessage {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    private @NonNull String path;

    public @NonNull String getPath() {
      return path;
    }

    public void setPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"path\" is null.");
      }
      this.path = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PreviewSourceMessage() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      private @Nullable String path;

      public @NonNull Builder setPath(@NonNull String setterArg) {
        this.path = setterArg;
        return this;
      }

      public @NonNull PreviewSourceMessage build() {
        PreviewSourceMessage pigeonReturn = new PreviewSourceMessage();
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setPath(path);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(textureId);
      toListResult.add(path);
      return toListResult;
    }

    static @NonNull PreviewSourceMessage fromList(@NonNull ArrayList<Object> list) {
      PreviewSourceMessage pigeonResult = new PreviewSourceMessage();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      Object path = list.get(1);
      pigeonResult.setPath((String) path);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PreviewPlayMessage {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PreviewPlayMessage() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      public @NonNull PreviewPlayMessage build() {
        PreviewPlayMessage pigeonReturn = new PreviewPlayMessage();
        pigeonReturn.setTextureId(textureId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(textureId);
      return toListResult;
    }

    static @NonNull PreviewPlayMessage fromList(@NonNull ArrayList<Object> list) {
      PreviewPlayMessage pigeonResult = new PreviewPlayMessage();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PreviewPauseMessage {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PreviewPauseMessage() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      public @NonNull PreviewPauseMessage build() {
        PreviewPauseMessage pigeonReturn = new PreviewPauseMessage();
        pigeonReturn.setTextureId(textureId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(textureId);
      return toListResult;
    }

    static @NonNull PreviewPauseMessage fromList(@NonNull ArrayList<Object> list) {
      PreviewPauseMessage pigeonResult = new PreviewPauseMessage();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PreviewDisposeMessage {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PreviewDisposeMessage() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      public @NonNull PreviewDisposeMessage build() {
        PreviewDisposeMessage pigeonReturn = new PreviewDisposeMessage();
        pigeonReturn.setTextureId(textureId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(textureId);
      return toListResult;
    }

    static @NonNull PreviewDisposeMessage fromList(@NonNull ArrayList<Object> list) {
      PreviewDisposeMessage pigeonResult = new PreviewDisposeMessage();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      return pigeonResult;
    }
  }

  private static class ImageVideoFilterFactoryApiCodec extends StandardMessageCodec {
    public static final ImageVideoFilterFactoryApiCodec INSTANCE = new ImageVideoFilterFactoryApiCodec();

    private ImageVideoFilterFactoryApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AppendFilterMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AppendShaderFilterMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return CreateFilterMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return CreateShaderFilterMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return ExportDataMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return ExportFileMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return FilterMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return InputDataMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return InputDataSourceValueMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return InputDataValueMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return InputNumberListValueMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return InputNumberValueMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return InputSourceMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return RemoveFilterMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return ReplaceFilterMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AppendFilterMessage) {
        stream.write(128);
        writeValue(stream, ((AppendFilterMessage) value).toList());
      } else if (value instanceof AppendShaderFilterMessage) {
        stream.write(129);
        writeValue(stream, ((AppendShaderFilterMessage) value).toList());
      } else if (value instanceof CreateFilterMessage) {
        stream.write(130);
        writeValue(stream, ((CreateFilterMessage) value).toList());
      } else if (value instanceof CreateShaderFilterMessage) {
        stream.write(131);
        writeValue(stream, ((CreateShaderFilterMessage) value).toList());
      } else if (value instanceof ExportDataMessage) {
        stream.write(132);
        writeValue(stream, ((ExportDataMessage) value).toList());
      } else if (value instanceof ExportFileMessage) {
        stream.write(133);
        writeValue(stream, ((ExportFileMessage) value).toList());
      } else if (value instanceof FilterMessage) {
        stream.write(134);
        writeValue(stream, ((FilterMessage) value).toList());
      } else if (value instanceof InputDataMessage) {
        stream.write(135);
        writeValue(stream, ((InputDataMessage) value).toList());
      } else if (value instanceof InputDataSourceValueMessage) {
        stream.write(136);
        writeValue(stream, ((InputDataSourceValueMessage) value).toList());
      } else if (value instanceof InputDataValueMessage) {
        stream.write(137);
        writeValue(stream, ((InputDataValueMessage) value).toList());
      } else if (value instanceof InputNumberListValueMessage) {
        stream.write(138);
        writeValue(stream, ((InputNumberListValueMessage) value).toList());
      } else if (value instanceof InputNumberValueMessage) {
        stream.write(139);
        writeValue(stream, ((InputNumberValueMessage) value).toList());
      } else if (value instanceof InputSourceMessage) {
        stream.write(140);
        writeValue(stream, ((InputSourceMessage) value).toList());
      } else if (value instanceof RemoveFilterMessage) {
        stream.write(141);
        writeValue(stream, ((RemoveFilterMessage) value).toList());
      } else if (value instanceof ReplaceFilterMessage) {
        stream.write(142);
        writeValue(stream, ((ReplaceFilterMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ImageVideoFilterFactoryApi {

    @NonNull 
    FilterMessage createFilter(@NonNull CreateFilterMessage msg);

    @NonNull 
    FilterMessage createShaderFilter(@NonNull CreateShaderFilterMessage msg);

    @NonNull 
    FilterMessage createFilterGroup();

    void appendFilter(@NonNull AppendFilterMessage msg);

    void appendShaderFilter(@NonNull AppendShaderFilterMessage msg);

    void removeFilter(@NonNull RemoveFilterMessage msg);

    void replaceFilter(@NonNull ReplaceFilterMessage msg);

    void setInputData(@NonNull InputDataMessage msg);

    void setInputSource(@NonNull InputSourceMessage msg);

    @NonNull 
    ExportDataMessage exportData(@NonNull ExportDataMessage msg);

    void exportImageFile(@NonNull ExportFileMessage msg);

    @NonNull 
    Long exportVideoFile(@NonNull ExportFileMessage msg);

    void setNumberValue(@NonNull InputNumberValueMessage msg);

    void setNumberListValue(@NonNull InputNumberListValueMessage msg);

    void setDataValue(@NonNull InputDataValueMessage msg);

    void setDataSourceValue(@NonNull InputDataSourceValueMessage msg);

    void dispose(@NonNull FilterMessage msg);

    @Nullable 
    String videoFormatName(@NonNull InputSourceMessage msg);

    @NonNull 
    List<String> videoAvailablePresets(@NonNull InputSourceMessage msg);

    /** The codec used by ImageVideoFilterFactoryApi. */
    static MessageCodec<Object> getCodec() {
      return ImageVideoFilterFactoryApiCodec.INSTANCE;
    }
    /**Sets up an instance of `ImageVideoFilterFactoryApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ImageVideoFilterFactoryApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.createFilter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  CreateFilterMessage msgArg = (CreateFilterMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  FilterMessage output = api.createFilter(msgArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.createShaderFilter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  CreateShaderFilterMessage msgArg = (CreateShaderFilterMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  FilterMessage output = api.createShaderFilter(msgArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.createFilterGroup", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  FilterMessage output = api.createFilterGroup();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.appendFilter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  AppendFilterMessage msgArg = (AppendFilterMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.appendFilter(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.appendShaderFilter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  AppendShaderFilterMessage msgArg = (AppendShaderFilterMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.appendShaderFilter(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.removeFilter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  RemoveFilterMessage msgArg = (RemoveFilterMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.removeFilter(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.replaceFilter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  ReplaceFilterMessage msgArg = (ReplaceFilterMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.replaceFilter(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.setInputData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  InputDataMessage msgArg = (InputDataMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setInputData(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.setInputSource", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  InputSourceMessage msgArg = (InputSourceMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setInputSource(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  ExportDataMessage msgArg = (ExportDataMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  ExportDataMessage output = api.exportData(msgArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportImageFile", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  ExportFileMessage msgArg = (ExportFileMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.exportImageFile(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportVideoFile", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  ExportFileMessage msgArg = (ExportFileMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  Long output = api.exportVideoFile(msgArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.setNumberValue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  InputNumberValueMessage msgArg = (InputNumberValueMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setNumberValue(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.setNumberListValue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  InputNumberListValueMessage msgArg = (InputNumberListValueMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setNumberListValue(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.setDataValue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  InputDataValueMessage msgArg = (InputDataValueMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setDataValue(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.setDataSourceValue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  InputDataSourceValueMessage msgArg = (InputDataSourceValueMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setDataSourceValue(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.dispose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  FilterMessage msgArg = (FilterMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.dispose(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.videoFormatName", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  InputSourceMessage msgArg = (InputSourceMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  String output = api.videoFormatName(msgArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.ImageVideoFilterFactoryApi.videoAvailablePresets", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  InputSourceMessage msgArg = (InputSourceMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  List<String> output = api.videoAvailablePresets(msgArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class VideoPreviewApiCodec extends StandardMessageCodec {
    public static final VideoPreviewApiCodec INSTANCE = new VideoPreviewApiCodec();

    private VideoPreviewApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ActivateFilterPreviewMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PreviewCreateMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PreviewDisposeMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PreviewPauseMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PreviewPlayMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PreviewSourceMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ActivateFilterPreviewMessage) {
        stream.write(128);
        writeValue(stream, ((ActivateFilterPreviewMessage) value).toList());
      } else if (value instanceof PreviewCreateMessage) {
        stream.write(129);
        writeValue(stream, ((PreviewCreateMessage) value).toList());
      } else if (value instanceof PreviewDisposeMessage) {
        stream.write(130);
        writeValue(stream, ((PreviewDisposeMessage) value).toList());
      } else if (value instanceof PreviewPauseMessage) {
        stream.write(131);
        writeValue(stream, ((PreviewPauseMessage) value).toList());
      } else if (value instanceof PreviewPlayMessage) {
        stream.write(132);
        writeValue(stream, ((PreviewPlayMessage) value).toList());
      } else if (value instanceof PreviewSourceMessage) {
        stream.write(133);
        writeValue(stream, ((PreviewSourceMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface VideoPreviewApi {

    @NonNull 
    PreviewCreateMessage create();

    void setFilter(@NonNull ActivateFilterPreviewMessage msg);

    void setSource(@NonNull PreviewSourceMessage msg);

    void play(@NonNull PreviewPlayMessage msg);

    void pause(@NonNull PreviewPauseMessage msg);

    void dispose(@NonNull PreviewDisposeMessage msg);

    /** The codec used by VideoPreviewApi. */
    static MessageCodec<Object> getCodec() {
      return VideoPreviewApiCodec.INSTANCE;
    }
    /**Sets up an instance of `VideoPreviewApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, VideoPreviewApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  PreviewCreateMessage output = api.create();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.setFilter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  ActivateFilterPreviewMessage msgArg = (ActivateFilterPreviewMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setFilter(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.setSource", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  PreviewSourceMessage msgArg = (PreviewSourceMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.setSource(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.play", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  PreviewPlayMessage msgArg = (PreviewPlayMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.play(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  PreviewPauseMessage msgArg = (PreviewPauseMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.pause(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.dispose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  PreviewDisposeMessage msgArg = (PreviewDisposeMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.dispose(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
