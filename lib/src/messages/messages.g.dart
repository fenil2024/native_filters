// Copyright 2022
// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class CreateShaderFilterMessage {
  CreateShaderFilterMessage({
    this.vertex,
    required this.shader,
    required this.twoInput,
    required this.params,
  });

  String? vertex;

  String shader;

  bool twoInput;

  Map<String?, Map<String?, Object?>?> params;

  Object encode() {
    return <Object?>[
      vertex,
      shader,
      twoInput,
      params,
    ];
  }

  static CreateShaderFilterMessage decode(Object result) {
    result as List<Object?>;
    return CreateShaderFilterMessage(
      vertex: result[0] as String?,
      shader: result[1]! as String,
      twoInput: result[2]! as bool,
      params: (result[3] as Map<Object?, Object?>?)!.cast<String?, Map<String?, Object?>?>(),
    );
  }
}

class CreateFilterMessage {
  CreateFilterMessage({
    required this.name,
  });

  String name;

  Object encode() {
    return <Object?>[
      name,
    ];
  }

  static CreateFilterMessage decode(Object result) {
    result as List<Object?>;
    return CreateFilterMessage(
      name: result[0]! as String,
    );
  }
}

class AppendFilterMessage {
  AppendFilterMessage({
    required this.name,
    required this.filterId,
  });

  String name;

  int filterId;

  Object encode() {
    return <Object?>[
      name,
      filterId,
    ];
  }

  static AppendFilterMessage decode(Object result) {
    result as List<Object?>;
    return AppendFilterMessage(
      name: result[0]! as String,
      filterId: result[1]! as int,
    );
  }
}

class AppendShaderFilterMessage {
  AppendShaderFilterMessage({
    required this.filterId,
    this.vertex,
    required this.shader,
    required this.params,
  });

  int filterId;

  String? vertex;

  String shader;

  Map<String?, Map<String?, Object?>?> params;

  Object encode() {
    return <Object?>[
      filterId,
      vertex,
      shader,
      params,
    ];
  }

  static AppendShaderFilterMessage decode(Object result) {
    result as List<Object?>;
    return AppendShaderFilterMessage(
      filterId: result[0]! as int,
      vertex: result[1] as String?,
      shader: result[2]! as String,
      params: (result[3] as Map<Object?, Object?>?)!.cast<String?, Map<String?, Object?>?>(),
    );
  }
}

class RemoveFilterMessage {
  RemoveFilterMessage({
    required this.filterId,
    required this.filterIndex,
  });

  int filterId;

  int filterIndex;

  Object encode() {
    return <Object?>[
      filterId,
      filterIndex,
    ];
  }

  static RemoveFilterMessage decode(Object result) {
    result as List<Object?>;
    return RemoveFilterMessage(
      filterId: result[0]! as int,
      filterIndex: result[1]! as int,
    );
  }
}

class ReplaceFilterMessage {
  ReplaceFilterMessage({
    required this.filterId,
    required this.filterIndex,
    required this.name,
  });

  int filterId;

  int filterIndex;

  String name;

  Object encode() {
    return <Object?>[
      filterId,
      filterIndex,
      name,
    ];
  }

  static ReplaceFilterMessage decode(Object result) {
    result as List<Object?>;
    return ReplaceFilterMessage(
      filterId: result[0]! as int,
      filterIndex: result[1]! as int,
      name: result[2]! as String,
    );
  }
}

class InputSourceMessage {
  InputSourceMessage({
    required this.filterId,
    required this.path,
    required this.asset,
    required this.video,
  });

  int filterId;

  String path;

  bool asset;

  bool video;

  Object encode() {
    return <Object?>[
      filterId,
      path,
      asset,
      video,
    ];
  }

  static InputSourceMessage decode(Object result) {
    result as List<Object?>;
    return InputSourceMessage(
      filterId: result[0]! as int,
      path: result[1]! as String,
      asset: result[2]! as bool,
      video: result[3]! as bool,
    );
  }
}

class InputDataMessage {
  InputDataMessage({
    required this.filterId,
    required this.data,
  });

  int filterId;

  Uint8List data;

  Object encode() {
    return <Object?>[
      filterId,
      data,
    ];
  }

  static InputDataMessage decode(Object result) {
    result as List<Object?>;
    return InputDataMessage(
      filterId: result[0]! as int,
      data: result[1]! as Uint8List,
    );
  }
}

class ExportFileMessage {
  ExportFileMessage({
    required this.filterId,
    required this.path,
    required this.context,
    this.presetName,
    required this.period,
  });

  int filterId;

  String path;

  String context;

  String? presetName;

  int period;

  Object encode() {
    return <Object?>[
      filterId,
      path,
      context,
      presetName,
      period,
    ];
  }

  static ExportFileMessage decode(Object result) {
    result as List<Object?>;
    return ExportFileMessage(
      filterId: result[0]! as int,
      path: result[1]! as String,
      context: result[2]! as String,
      presetName: result[3] as String?,
      period: result[4]! as int,
    );
  }
}

class ExportDataMessage {
  ExportDataMessage({
    required this.filterId,
    this.data,
    required this.context,
  });

  int filterId;

  Uint8List? data;

  String context;

  Object encode() {
    return <Object?>[
      filterId,
      data,
      context,
    ];
  }

  static ExportDataMessage decode(Object result) {
    result as List<Object?>;
    return ExportDataMessage(
      filterId: result[0]! as int,
      data: result[1] as Uint8List?,
      context: result[2]! as String,
    );
  }
}

class InputNumberValueMessage {
  InputNumberValueMessage({
    required this.filterId,
    required this.filterIndex,
    required this.key,
    required this.value,
  });

  int filterId;

  int filterIndex;

  String key;

  double value;

  Object encode() {
    return <Object?>[
      filterId,
      filterIndex,
      key,
      value,
    ];
  }

  static InputNumberValueMessage decode(Object result) {
    result as List<Object?>;
    return InputNumberValueMessage(
      filterId: result[0]! as int,
      filterIndex: result[1]! as int,
      key: result[2]! as String,
      value: result[3]! as double,
    );
  }
}

class InputNumberListValueMessage {
  InputNumberListValueMessage({
    required this.filterId,
    required this.filterIndex,
    required this.key,
    required this.value,
  });

  int filterId;

  int filterIndex;

  String key;

  List<double?> value;

  Object encode() {
    return <Object?>[
      filterId,
      filterIndex,
      key,
      value,
    ];
  }

  static InputNumberListValueMessage decode(Object result) {
    result as List<Object?>;
    return InputNumberListValueMessage(
      filterId: result[0]! as int,
      filterIndex: result[1]! as int,
      key: result[2]! as String,
      value: (result[3] as List<Object?>?)!.cast<double?>(),
    );
  }
}

class InputDataValueMessage {
  InputDataValueMessage({
    required this.filterId,
    required this.filterIndex,
    required this.key,
    required this.value,
    required this.lut8x64,
    required this.process,
  });

  int filterId;

  int filterIndex;

  String key;

  Uint8List value;

  bool lut8x64;

  bool process;

  Object encode() {
    return <Object?>[
      filterId,
      filterIndex,
      key,
      value,
      lut8x64,
      process,
    ];
  }

  static InputDataValueMessage decode(Object result) {
    result as List<Object?>;
    return InputDataValueMessage(
      filterId: result[0]! as int,
      filterIndex: result[1]! as int,
      key: result[2]! as String,
      value: result[3]! as Uint8List,
      lut8x64: result[4]! as bool,
      process: result[5]! as bool,
    );
  }
}

class InputDataSourceValueMessage {
  InputDataSourceValueMessage({
    required this.filterId,
    required this.filterIndex,
    required this.key,
    required this.value,
    required this.lut8x64,
    required this.process,
  });

  int filterId;

  int filterIndex;

  String key;

  String value;

  bool lut8x64;

  bool process;

  Object encode() {
    return <Object?>[
      filterId,
      filterIndex,
      key,
      value,
      lut8x64,
      process,
    ];
  }

  static InputDataSourceValueMessage decode(Object result) {
    result as List<Object?>;
    return InputDataSourceValueMessage(
      filterId: result[0]! as int,
      filterIndex: result[1]! as int,
      key: result[2]! as String,
      value: result[3]! as String,
      lut8x64: result[4]! as bool,
      process: result[5]! as bool,
    );
  }
}

class FilterMessage {
  FilterMessage({
    required this.filterId,
  });

  int filterId;

  Object encode() {
    return <Object?>[
      filterId,
    ];
  }

  static FilterMessage decode(Object result) {
    result as List<Object?>;
    return FilterMessage(
      filterId: result[0]! as int,
    );
  }
}

class PreviewCreateMessage {
  PreviewCreateMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    return <Object?>[
      textureId,
    ];
  }

  static PreviewCreateMessage decode(Object result) {
    result as List<Object?>;
    return PreviewCreateMessage(
      textureId: result[0]! as int,
    );
  }
}

class ActivateFilterPreviewMessage {
  ActivateFilterPreviewMessage({
    required this.textureId,
    required this.filterId,
    required this.context,
  });

  int textureId;

  int filterId;

  String context;

  Object encode() {
    return <Object?>[
      textureId,
      filterId,
      context,
    ];
  }

  static ActivateFilterPreviewMessage decode(Object result) {
    result as List<Object?>;
    return ActivateFilterPreviewMessage(
      textureId: result[0]! as int,
      filterId: result[1]! as int,
      context: result[2]! as String,
    );
  }
}

class PreviewSourceMessage {
  PreviewSourceMessage({
    required this.textureId,
    required this.path,
  });

  int textureId;

  String path;

  Object encode() {
    return <Object?>[
      textureId,
      path,
    ];
  }

  static PreviewSourceMessage decode(Object result) {
    result as List<Object?>;
    return PreviewSourceMessage(
      textureId: result[0]! as int,
      path: result[1]! as String,
    );
  }
}

class PreviewPlayMessage {
  PreviewPlayMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    return <Object?>[
      textureId,
    ];
  }

  static PreviewPlayMessage decode(Object result) {
    result as List<Object?>;
    return PreviewPlayMessage(
      textureId: result[0]! as int,
    );
  }
}

class PreviewPauseMessage {
  PreviewPauseMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    return <Object?>[
      textureId,
    ];
  }

  static PreviewPauseMessage decode(Object result) {
    result as List<Object?>;
    return PreviewPauseMessage(
      textureId: result[0]! as int,
    );
  }
}

class PreviewDisposeMessage {
  PreviewDisposeMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    return <Object?>[
      textureId,
    ];
  }

  static PreviewDisposeMessage decode(Object result) {
    result as List<Object?>;
    return PreviewDisposeMessage(
      textureId: result[0]! as int,
    );
  }
}

class _ImageVideoFilterFactoryApiCodec extends StandardMessageCodec {
  const _ImageVideoFilterFactoryApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppendFilterMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AppendShaderFilterMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is CreateFilterMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is CreateShaderFilterMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ExportDataMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ExportFileMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is FilterMessage) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is InputDataMessage) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is InputDataSourceValueMessage) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is InputDataValueMessage) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is InputNumberListValueMessage) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is InputNumberValueMessage) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is InputSourceMessage) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is RemoveFilterMessage) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is ReplaceFilterMessage) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AppendFilterMessage.decode(readValue(buffer)!);
      case 129: 
        return AppendShaderFilterMessage.decode(readValue(buffer)!);
      case 130: 
        return CreateFilterMessage.decode(readValue(buffer)!);
      case 131: 
        return CreateShaderFilterMessage.decode(readValue(buffer)!);
      case 132: 
        return ExportDataMessage.decode(readValue(buffer)!);
      case 133: 
        return ExportFileMessage.decode(readValue(buffer)!);
      case 134: 
        return FilterMessage.decode(readValue(buffer)!);
      case 135: 
        return InputDataMessage.decode(readValue(buffer)!);
      case 136: 
        return InputDataSourceValueMessage.decode(readValue(buffer)!);
      case 137: 
        return InputDataValueMessage.decode(readValue(buffer)!);
      case 138: 
        return InputNumberListValueMessage.decode(readValue(buffer)!);
      case 139: 
        return InputNumberValueMessage.decode(readValue(buffer)!);
      case 140: 
        return InputSourceMessage.decode(readValue(buffer)!);
      case 141: 
        return RemoveFilterMessage.decode(readValue(buffer)!);
      case 142: 
        return ReplaceFilterMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ImageVideoFilterFactoryApi {
  /// Constructor for [ImageVideoFilterFactoryApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ImageVideoFilterFactoryApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ImageVideoFilterFactoryApiCodec();

  Future<FilterMessage> createFilter(CreateFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.createFilter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FilterMessage?)!;
    }
  }

  Future<FilterMessage> createShaderFilter(CreateShaderFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.createShaderFilter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FilterMessage?)!;
    }
  }

  Future<FilterMessage> createFilterGroup() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.createFilterGroup', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FilterMessage?)!;
    }
  }

  Future<void> appendFilter(AppendFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.appendFilter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> appendShaderFilter(AppendShaderFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.appendShaderFilter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeFilter(RemoveFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.removeFilter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> replaceFilter(ReplaceFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.replaceFilter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setInputData(InputDataMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setInputData', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setInputSource(InputSourceMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setInputSource', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<ExportDataMessage> exportData(ExportDataMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportData', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ExportDataMessage?)!;
    }
  }

  Future<void> exportImageFile(ExportFileMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportImageFile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> exportVideoFile(ExportFileMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportVideoFile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<void> setNumberValue(InputNumberValueMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setNumberValue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setNumberListValue(InputNumberListValueMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setNumberListValue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setDataValue(InputDataValueMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setDataValue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setDataSourceValue(InputDataSourceValueMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setDataSourceValue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> dispose(FilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.dispose', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String?> videoFormatName(InputSourceMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.videoFormatName', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as String?);
    }
  }

  Future<List<String?>> videoAvailablePresets(InputSourceMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.videoAvailablePresets', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<String?>();
    }
  }
}

class _VideoPreviewApiCodec extends StandardMessageCodec {
  const _VideoPreviewApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ActivateFilterPreviewMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PreviewCreateMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PreviewDisposeMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PreviewPauseMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PreviewPlayMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PreviewSourceMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ActivateFilterPreviewMessage.decode(readValue(buffer)!);
      case 129: 
        return PreviewCreateMessage.decode(readValue(buffer)!);
      case 130: 
        return PreviewDisposeMessage.decode(readValue(buffer)!);
      case 131: 
        return PreviewPauseMessage.decode(readValue(buffer)!);
      case 132: 
        return PreviewPlayMessage.decode(readValue(buffer)!);
      case 133: 
        return PreviewSourceMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class VideoPreviewApi {
  /// Constructor for [VideoPreviewApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  VideoPreviewApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _VideoPreviewApiCodec();

  Future<PreviewCreateMessage> create() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.create', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PreviewCreateMessage?)!;
    }
  }

  Future<void> setFilter(ActivateFilterPreviewMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.setFilter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setSource(PreviewSourceMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.setSource', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> play(PreviewPlayMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.play', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause(PreviewPauseMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.pause', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> dispose(PreviewDisposeMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.dispose', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
