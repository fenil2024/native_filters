// Copyright 2022
// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class CreateShaderFilterMessage {
  CreateShaderFilterMessage({
    this.vertex,
    required this.shader,
    required this.params,
  });

  String? vertex;
  String shader;
  Map<String?, Map<String?, Object?>?> params;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['vertex'] = vertex;
    pigeonMap['shader'] = shader;
    pigeonMap['params'] = params;
    return pigeonMap;
  }

  static CreateShaderFilterMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CreateShaderFilterMessage(
      vertex: pigeonMap['vertex'] as String?,
      shader: pigeonMap['shader']! as String,
      params: (pigeonMap['params'] as Map<Object?, Object?>?)!.cast<String?, Map<String?, Object?>?>(),
    );
  }
}

class CreateFilterMessage {
  CreateFilterMessage({
    required this.name,
  });

  String name;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['name'] = name;
    return pigeonMap;
  }

  static CreateFilterMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CreateFilterMessage(
      name: pigeonMap['name']! as String,
    );
  }
}

class AppendFilterMessage {
  AppendFilterMessage({
    required this.name,
    required this.filterId,
  });

  String name;
  int filterId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['name'] = name;
    pigeonMap['filterId'] = filterId;
    return pigeonMap;
  }

  static AppendFilterMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppendFilterMessage(
      name: pigeonMap['name']! as String,
      filterId: pigeonMap['filterId']! as int,
    );
  }
}

class AppendShaderFilterMessage {
  AppendShaderFilterMessage({
    required this.filterId,
    this.vertex,
    required this.shader,
    required this.params,
  });

  int filterId;
  String? vertex;
  String shader;
  Map<String?, Map<String?, Object?>?> params;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['vertex'] = vertex;
    pigeonMap['shader'] = shader;
    pigeonMap['params'] = params;
    return pigeonMap;
  }

  static AppendShaderFilterMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppendShaderFilterMessage(
      filterId: pigeonMap['filterId']! as int,
      vertex: pigeonMap['vertex'] as String?,
      shader: pigeonMap['shader']! as String,
      params: (pigeonMap['params'] as Map<Object?, Object?>?)!.cast<String?, Map<String?, Object?>?>(),
    );
  }
}

class RemoveFilterMessage {
  RemoveFilterMessage({
    required this.filterId,
    required this.filterIndex,
  });

  int filterId;
  int filterIndex;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['filterIndex'] = filterIndex;
    return pigeonMap;
  }

  static RemoveFilterMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RemoveFilterMessage(
      filterId: pigeonMap['filterId']! as int,
      filterIndex: pigeonMap['filterIndex']! as int,
    );
  }
}

class ReplaceFilterMessage {
  ReplaceFilterMessage({
    required this.filterId,
    required this.filterIndex,
    required this.name,
  });

  int filterId;
  int filterIndex;
  String name;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['filterIndex'] = filterIndex;
    pigeonMap['name'] = name;
    return pigeonMap;
  }

  static ReplaceFilterMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ReplaceFilterMessage(
      filterId: pigeonMap['filterId']! as int,
      filterIndex: pigeonMap['filterIndex']! as int,
      name: pigeonMap['name']! as String,
    );
  }
}

class InputSourceMessage {
  InputSourceMessage({
    required this.filterId,
    required this.path,
    required this.asset,
    required this.video,
  });

  int filterId;
  String path;
  bool asset;
  bool video;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['path'] = path;
    pigeonMap['asset'] = asset;
    pigeonMap['video'] = video;
    return pigeonMap;
  }

  static InputSourceMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return InputSourceMessage(
      filterId: pigeonMap['filterId']! as int,
      path: pigeonMap['path']! as String,
      asset: pigeonMap['asset']! as bool,
      video: pigeonMap['video']! as bool,
    );
  }
}

class InputDataMessage {
  InputDataMessage({
    required this.filterId,
    required this.data,
  });

  int filterId;
  Uint8List data;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['data'] = data;
    return pigeonMap;
  }

  static InputDataMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return InputDataMessage(
      filterId: pigeonMap['filterId']! as int,
      data: pigeonMap['data']! as Uint8List,
    );
  }
}

class ExportFileMessage {
  ExportFileMessage({
    required this.filterId,
    required this.path,
    required this.video,
  });

  int filterId;
  String path;
  bool video;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['path'] = path;
    pigeonMap['video'] = video;
    return pigeonMap;
  }

  static ExportFileMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ExportFileMessage(
      filterId: pigeonMap['filterId']! as int,
      path: pigeonMap['path']! as String,
      video: pigeonMap['video']! as bool,
    );
  }
}

class ExportDataMessage {
  ExportDataMessage({
    required this.filterId,
    required this.data,
  });

  int filterId;
  Uint8List data;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['data'] = data;
    return pigeonMap;
  }

  static ExportDataMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ExportDataMessage(
      filterId: pigeonMap['filterId']! as int,
      data: pigeonMap['data']! as Uint8List,
    );
  }
}

class InputNumberValueMessage {
  InputNumberValueMessage({
    required this.filterId,
    required this.filterIndex,
    required this.key,
    required this.value,
  });

  int filterId;
  int filterIndex;
  String key;
  double value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['filterIndex'] = filterIndex;
    pigeonMap['key'] = key;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static InputNumberValueMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return InputNumberValueMessage(
      filterId: pigeonMap['filterId']! as int,
      filterIndex: pigeonMap['filterIndex']! as int,
      key: pigeonMap['key']! as String,
      value: pigeonMap['value']! as double,
    );
  }
}

class InputNumberListValueMessage {
  InputNumberListValueMessage({
    required this.filterId,
    required this.filterIndex,
    required this.key,
    required this.value,
  });

  int filterId;
  int filterIndex;
  String key;
  List<double?> value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['filterIndex'] = filterIndex;
    pigeonMap['key'] = key;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static InputNumberListValueMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return InputNumberListValueMessage(
      filterId: pigeonMap['filterId']! as int,
      filterIndex: pigeonMap['filterIndex']! as int,
      key: pigeonMap['key']! as String,
      value: (pigeonMap['value'] as List<Object?>?)!.cast<double?>(),
    );
  }
}

class InputDataValueMessage {
  InputDataValueMessage({
    required this.filterId,
    required this.filterIndex,
    required this.key,
    required this.value,
    required this.lut8x64,
    required this.process,
  });

  int filterId;
  int filterIndex;
  String key;
  Uint8List value;
  bool lut8x64;
  bool process;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['filterIndex'] = filterIndex;
    pigeonMap['key'] = key;
    pigeonMap['value'] = value;
    pigeonMap['lut8x64'] = lut8x64;
    pigeonMap['process'] = process;
    return pigeonMap;
  }

  static InputDataValueMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return InputDataValueMessage(
      filterId: pigeonMap['filterId']! as int,
      filterIndex: pigeonMap['filterIndex']! as int,
      key: pigeonMap['key']! as String,
      value: pigeonMap['value']! as Uint8List,
      lut8x64: pigeonMap['lut8x64']! as bool,
      process: pigeonMap['process']! as bool,
    );
  }
}

class InputDataSourceValueMessage {
  InputDataSourceValueMessage({
    required this.filterId,
    required this.filterIndex,
    required this.key,
    required this.value,
    required this.lut8x64,
    required this.process,
  });

  int filterId;
  int filterIndex;
  String key;
  String value;
  bool lut8x64;
  bool process;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    pigeonMap['filterIndex'] = filterIndex;
    pigeonMap['key'] = key;
    pigeonMap['value'] = value;
    pigeonMap['lut8x64'] = lut8x64;
    pigeonMap['process'] = process;
    return pigeonMap;
  }

  static InputDataSourceValueMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return InputDataSourceValueMessage(
      filterId: pigeonMap['filterId']! as int,
      filterIndex: pigeonMap['filterIndex']! as int,
      key: pigeonMap['key']! as String,
      value: pigeonMap['value']! as String,
      lut8x64: pigeonMap['lut8x64']! as bool,
      process: pigeonMap['process']! as bool,
    );
  }
}

class FilterMessage {
  FilterMessage({
    required this.filterId,
  });

  int filterId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filterId'] = filterId;
    return pigeonMap;
  }

  static FilterMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return FilterMessage(
      filterId: pigeonMap['filterId']! as int,
    );
  }
}

class PreviewCreateMessage {
  PreviewCreateMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    return pigeonMap;
  }

  static PreviewCreateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PreviewCreateMessage(
      textureId: pigeonMap['textureId']! as int,
    );
  }
}

class PreviewFilterMessage {
  PreviewFilterMessage({
    required this.textureId,
    required this.filterId,
  });

  int textureId;
  int filterId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['filterId'] = filterId;
    return pigeonMap;
  }

  static PreviewFilterMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PreviewFilterMessage(
      textureId: pigeonMap['textureId']! as int,
      filterId: pigeonMap['filterId']! as int,
    );
  }
}

class PreviewSourceMessage {
  PreviewSourceMessage({
    required this.textureId,
    required this.path,
  });

  int textureId;
  String path;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['path'] = path;
    return pigeonMap;
  }

  static PreviewSourceMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PreviewSourceMessage(
      textureId: pigeonMap['textureId']! as int,
      path: pigeonMap['path']! as String,
    );
  }
}

class PreviewPlayMessage {
  PreviewPlayMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    return pigeonMap;
  }

  static PreviewPlayMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PreviewPlayMessage(
      textureId: pigeonMap['textureId']! as int,
    );
  }
}

class PreviewPauseMessage {
  PreviewPauseMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    return pigeonMap;
  }

  static PreviewPauseMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PreviewPauseMessage(
      textureId: pigeonMap['textureId']! as int,
    );
  }
}

class PreviewDisposeMessage {
  PreviewDisposeMessage({
    required this.textureId,
  });

  int textureId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['textureId'] = textureId;
    return pigeonMap;
  }

  static PreviewDisposeMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PreviewDisposeMessage(
      textureId: pigeonMap['textureId']! as int,
    );
  }
}

class _ImageVideoFilterFactoryApiCodec extends StandardMessageCodec{
  const _ImageVideoFilterFactoryApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppendFilterMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is AppendShaderFilterMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is CreateFilterMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is CreateShaderFilterMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is ExportDataMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is ExportFileMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
    if (value is FilterMessage) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else 
    if (value is InputDataMessage) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else 
    if (value is InputDataSourceValueMessage) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else 
    if (value is InputDataValueMessage) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else 
    if (value is InputNumberListValueMessage) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else 
    if (value is InputNumberValueMessage) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else 
    if (value is InputSourceMessage) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else 
    if (value is RemoveFilterMessage) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else 
    if (value is ReplaceFilterMessage) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return AppendFilterMessage.decode(readValue(buffer)!);
      
      case 129:       
        return AppendShaderFilterMessage.decode(readValue(buffer)!);
      
      case 130:       
        return CreateFilterMessage.decode(readValue(buffer)!);
      
      case 131:       
        return CreateShaderFilterMessage.decode(readValue(buffer)!);
      
      case 132:       
        return ExportDataMessage.decode(readValue(buffer)!);
      
      case 133:       
        return ExportFileMessage.decode(readValue(buffer)!);
      
      case 134:       
        return FilterMessage.decode(readValue(buffer)!);
      
      case 135:       
        return InputDataMessage.decode(readValue(buffer)!);
      
      case 136:       
        return InputDataSourceValueMessage.decode(readValue(buffer)!);
      
      case 137:       
        return InputDataValueMessage.decode(readValue(buffer)!);
      
      case 138:       
        return InputNumberListValueMessage.decode(readValue(buffer)!);
      
      case 139:       
        return InputNumberValueMessage.decode(readValue(buffer)!);
      
      case 140:       
        return InputSourceMessage.decode(readValue(buffer)!);
      
      case 141:       
        return RemoveFilterMessage.decode(readValue(buffer)!);
      
      case 142:       
        return ReplaceFilterMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class ImageVideoFilterFactoryApi {
  /// Constructor for [ImageVideoFilterFactoryApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ImageVideoFilterFactoryApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ImageVideoFilterFactoryApiCodec();

  Future<FilterMessage> createFilter(CreateFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.createFilter', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FilterMessage?)!;
    }
  }

  Future<FilterMessage> createShaderFilter(CreateShaderFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.createShaderFilter', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FilterMessage?)!;
    }
  }

  Future<FilterMessage> createFilterGroup() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.createFilterGroup', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FilterMessage?)!;
    }
  }

  Future<void> appendFilter(AppendFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.appendFilter', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> appendShaderFilter(AppendShaderFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.appendShaderFilter', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> removeFilter(RemoveFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.removeFilter', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> replaceFilter(ReplaceFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.replaceFilter', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setInputData(InputDataMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setInputData', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setInputSource(InputSourceMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setInputSource', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<ExportDataMessage> exportData(FilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportData', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as ExportDataMessage?)!;
    }
  }

  Future<void> exportFile(ExportFileMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.exportFile', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setNumberValue(InputNumberValueMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setNumberValue', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setNumberListValue(InputNumberListValueMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setNumberListValue', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setDataValue(InputDataValueMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setDataValue', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setDataSourceValue(InputDataSourceValueMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.setDataSourceValue', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> dispose(FilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ImageVideoFilterFactoryApi.dispose', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _VideoPreviewApiCodec extends StandardMessageCodec{
  const _VideoPreviewApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PreviewCreateMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is PreviewDisposeMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is PreviewFilterMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is PreviewPauseMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is PreviewPlayMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is PreviewSourceMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return PreviewCreateMessage.decode(readValue(buffer)!);
      
      case 129:       
        return PreviewDisposeMessage.decode(readValue(buffer)!);
      
      case 130:       
        return PreviewFilterMessage.decode(readValue(buffer)!);
      
      case 131:       
        return PreviewPauseMessage.decode(readValue(buffer)!);
      
      case 132:       
        return PreviewPlayMessage.decode(readValue(buffer)!);
      
      case 133:       
        return PreviewSourceMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class VideoPreviewApi {
  /// Constructor for [VideoPreviewApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  VideoPreviewApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _VideoPreviewApiCodec();

  Future<PreviewCreateMessage> create() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.create', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as PreviewCreateMessage?)!;
    }
  }

  Future<void> setFilter(PreviewFilterMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.setFilter', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setSource(PreviewSourceMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.setSource', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> play(PreviewPlayMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.play', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> pause(PreviewPauseMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.pause', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> dispose(PreviewDisposeMessage arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.VideoPreviewApi.dispose', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_msg]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
